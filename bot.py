import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandObject
from loguru import logger
import io
from aiogram.fsm.context import FSMContext
import uuid
from pathlib import Path
import states
import buttons
import zipfile
import os
import shutil
import settings
from advertisement_manager import AdvertisementManager
from models.advertisement import AdvertisementCreateStatus
from adv_distributor import AdvDistributor
from yandex_disk_manager import YandexDiskManager
from archive_manager import ArchiveManager
import common_tools

bot = Bot(token=settings.BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

adv_manager = AdvertisementManager()

distributor = AdvDistributor()


@dp.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel(message: types.Message, state: FSMContext):
    await message.answer(f"–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    return await command_start(message, state)


@dp.message(F.text.lower() == "—Å—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
async def ad_remove(message: types.Message, state: FSMContext):
    links = common_tools.read_file(settings.LINKS_PATH)

    if len(links) > 0:

        text = f""

        for key, value in distributor.run_items_info.items():
            text += f"üì£ {key}. –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {value.adv_item.name} | –°—Ç–∞—Ç—É—Å: {value.status}\n"

        if len(text) > 1:
            await message.answer(text)
        else:
            await message.answer(f"üì£ –í —Ä–∞–±–æ—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–µ –º–æ–∂–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç—É")

    return await command_start(message, state)


@dp.message(F.text.lower() == "—É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def ad_remove(message: types.Message, state: FSMContext):
    current_list = adv_manager.get_all_advertisement()

    text = f""

    for item in current_list:
        text += f"üì£ {item.id}. –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {item.name}\n"

    if len(text) > 0:
        await message.answer(
            f"{text}\n\n–£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=buttons.Common.cancel,
                resize_keyboard=True,
            )
        )
        await state.set_state(states.AdvertisManager.delete_ad)
    else:
        await message.answer(f"‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

@dp.message(F.text.lower() == "–ø–∞—É–∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def ad_remove(message: types.Message, state: FSMContext):
    current_list = adv_manager.get_all_advertisement()

    text = f""

    for item in current_list:
        text += f"üì£ {item.id}. –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {item.name}\n"

    if len(text) > 0:
        await message.answer(
            f"{text}\n\n–°—Ç–∞–≤–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–∞—É–∑—É. –í–≤–µ–¥–∏—Ç–µ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–∞—É–∑—ã",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=buttons.Common.cancel,
                resize_keyboard=True,
            )
        )
        await state.set_state(states.AdvertisManager.pause_ad)
    else:
        await message.answer(f"‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

@dp.message(states.AdvertisManager.pause_ad)
async def get_adv_id_delete(message: types.Message, state: FSMContext):
    adv_id = message.text

    res = adv_manager.pause_unpause_ad(adv_id)

    if res is not None:
        try:
            if not res.is_paused:
                await distributor.on_ad_removed(adv_id)
                await message.answer(f"‚úÖ –†–µ–∫–ª–∞–º–∞ —Å id {adv_id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É")
            else:
                await distributor.on_ad_added(res)
                await message.answer(f"‚úÖ –†–µ–∫–ª–∞–º–∞ —Å id {adv_id} —Å–Ω—è—Ç–∞ —Å –ø–∞—É–∑—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–∞—É–∑—É: {e}")
    else:
        await message.answer("‚ùå –ù–µ —Å–º–æ–≥–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–∞—É–∑—É. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏")

    return await command_start(message, state)


@dp.message(states.AdvertisManager.delete_ad)
async def get_adv_id_delete(message: types.Message, state: FSMContext):
    adv_id = message.text

    if adv_manager.remove_ad(adv_id):
        try:
            await distributor.on_ad_removed(adv_id)
            await message.answer(f"‚úÖ –†–µ–∫–ª–∞–º–∞ —Å id {adv_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
    else:
        await message.answer("‚ùå –ù–µ —Å–º–æ–≥–ª–∏ —É–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏")

    return await command_start(message, state)


@dp.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã")
async def get_ad_name(message: types.Message, state: FSMContext):
    await message.answer(
        "üöÄ –•–æ—Ä–æ—à–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç(—ã) –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —è–Ω–¥–µ–∫—Å –¥–∏—Å–∫ —Å zip –∞—Ä—Ö–∏–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–∞(–æ–≤)",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=buttons.Common.cancel,
            resize_keyboard=True,
        )
    )
    await state.set_state(states.AccountUpload.waiting_file)


@dp.message(states.AccountUpload.waiting_file)
async def get_zip_links(message: types.Message, state: FSMContext):

    Path(f"{settings.ACCOUNTS_PATH}/ready").mkdir(parents=True, exist_ok=True)

    await message.answer("üöÄ –°–∫–∞—á–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã....")

    if await YandexDiskManager.download_file(message.text, f"{settings.ACCOUNTS_PATH}/tmp.zip"):

        await message.answer("üíØ –ê–∫–∫–∞—É–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º...")

        try:
            folders = ArchiveManager.unzip(f"{settings.ACCOUNTS_PATH}/tmp.zip", f"{settings.ACCOUNTS_PATH}/ready/")
            await message.answer(
                f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(next(os.walk(f'{settings.ACCOUNTS_PATH}/ready/'))[1])}\n\n–ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã...")

            result_folders = []

            for folder in folders:
                result_folders.append(f'{settings.ACCOUNTS_PATH}/ready/{folder}')

            results = await distributor.store.add_account(result_folders)

            for result in results:
                if result.error is not None:
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {result.account_path}: {result.error}")

            await message.answer(
                f"üéâ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ: {await distributor.store.get_accounts_count()}")

        except Exception as e:
            await message.answer(f"‚ùå –ù–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤: {e}")

        return await command_start(message, state)

    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                             reply_markup=types.ReplyKeyboardMarkup(
                                 keyboard=buttons.Common.cancel,
                                 resize_keyboard=True,
                             ))


@dp.message(F.text.lower() == "–æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
async def get_ad_name(message: types.Message, state: FSMContext):
    await message.answer(
        "üöÄ –•–æ—Ä–æ—à–æ, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –Ω–æ–≤—ã–µ. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—Ä—Ö–∏–≤ –≤ zip –∞—Ä—Ö–∏–≤–µ",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=buttons.Common.cancel,
            resize_keyboard=True,
        )
    )
    await state.set_state(states.AccountsReplace.waiting_file)


@dp.message(F.text.lower() == "—Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
async def get_ad_name(message: types.Message, state: FSMContext):
    count = await distributor.store.get_accounts_count()
    await message.answer(f"üéâ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ: {count}")
    return await command_start(message, state)


@dp.message(states.AccountsReplace.waiting_file)
async def get_zip_links(message: types.Message, state: FSMContext):
    Path(f"{settings.ACCOUNTS_PATH}/ready").mkdir(parents=True, exist_ok=True)

    await message.answer("üßπ –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã...")

    await distributor.store.unload_accounts()

    try:
        shutil.rmtree(f'{settings.ACCOUNTS_PATH}/ready')
    except Exception as e:
        logger.warning(f"Cannot clear accounts folder: {e}")

    await message.answer("üöÄ –°–∫–∞—á–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã....")

    if await YandexDiskManager.download_file(message.text, f"{settings.ACCOUNTS_PATH}/tmp.zip"):

        try:
            folders = ArchiveManager.unzip(f"{settings.ACCOUNTS_PATH}/tmp.zip", f"{settings.ACCOUNTS_PATH}/ready/")

            await message.answer(
                f"üéâ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(next(os.walk(f'{settings.ACCOUNTS_PATH}/ready/'))[1])}\n\n–ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã...")

            result_folders = []

            for folder in folders:
                result_folders.append(f'{settings.ACCOUNTS_PATH}/ready/{folder}')

            results = await distributor.store.add_account(result_folders)

            for result in results:
                if result.error is not None:
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {result.account_path}: {result.error}")
            await message.answer(
                f"üéâ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ: {await distributor.store.get_accounts_count()}")

        except Exception as e:
            await message.answer(f"‚ùå –ù–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤: {e}")

        return await command_start(message, state)

    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                             reply_markup=types.ReplyKeyboardMarkup(
                                 keyboard=buttons.Common.cancel,
                                 resize_keyboard=True,
                             ))


@dp.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def get_ad_name(message: types.Message, state: FSMContext):
    account_count = await distributor.store.get_accounts_count()
    ad_count = len(adv_manager.get_all_advertisement())

    if account_count > ad_count:
        await message.answer(
            "üöÄ –•–æ—Ä–æ—à–æ, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞, –¥–∞–ª–µ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ)",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=buttons.Common.cancel,
                resize_keyboard=True,
            )
        )
        await state.set_state(states.NewAdv.name)
    else:
        await message.answer(
            f"‚ùå –ù–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ {account_count}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {ad_count}\n\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ–ª—å—à–µ –∞–∫–∞—É–Ω—Ç–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        return await command_start(message, state)


@dp.message(F.text.lower() == "–æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫")
async def upload_links(message: types.Message, state: FSMContext):
    await message.answer(
        "üöÄ –•–æ—Ä–æ—à–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫. –ó–∞–≥—Ä—É–∑–∏—Ç–µ txt —Å–æ —Å–ø–∏—Å–æ–∫–æ–º –≥—Ä—É–ø–ø (–∫–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=buttons.Common.cancel,
            resize_keyboard=True,
        )
    )
    await state.set_state(states.LinksUpload.waiting_file)


@dp.message(states.LinksUpload.waiting_file, F.content_type.in_({"document"}))
async def get_links(message: types.Message, state: FSMContext):

    Path(f"/var/lib/tgspam/data/common").mkdir(parents=True, exist_ok=True)
    
    if message.document is not None:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        await bot.download_file(file_path, settings.LINKS_PATH)
        await message.answer("‚úÖ –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        return await command_start(message, state)
    else:
        await message.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω", reply_markup=types.ReplyKeyboardMarkup(
            keyboard=buttons.Common.cancel,
            resize_keyboard=True,
        ))


@dp.message(states.NewAdv.name)
async def get_ad_text(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)

    await message.answer(
        f"üöÄ –•–æ—Ä–æ—à–æ, –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç: {message.text}\n\n –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=buttons.Common.cancel,
            resize_keyboard=True,
        )
    )

    await state.set_state(states.NewAdv.text)


@dp.message(states.NewAdv.text)
async def get_ad_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)

    await message.answer(
        f"üöÄ –•–æ—Ä–æ—à–æ, —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç: {message.text}\n\n –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ö –ø—Ä–∏–º–µ—Ä—É: 12\n–ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ -1",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=buttons.Common.cancel,
            resize_keyboard=True,
        )
    )

    await state.set_state(states.NewAdv.publish_time)

@dp.message(states.NewAdv.publish_time)
async def get_ad_text(message: types.Message, state: FSMContext):

    try:
        ad_time = int(message.text)
        if ad_time == -1:
            await message.answer("–•–æ—Ä–æ—à–æ, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç\n\n–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∞ –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≥–æ—Ç–æ–≤–æ")
            await state.update_data(publish_time=None)
            await state.set_state(states.NewAdv.photos)
        else:
            await state.update_data(publish_time=ad_time)
            await message.answer(
                f"üöÄ –•–æ—Ä–æ—à–æ, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {message.text} —á–∞—Å–∞(–æ–≤). \n\n –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∞ –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≥–æ—Ç–æ–≤–æ",
                reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=buttons.Common.cancel,
                    resize_keyboard=True,
                )
            )
            await state.set_state(states.NewAdv.photos)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}\n\n–í–æ–∑–º–æ–∂–Ω–æ —É–∫–∞–∑–∞–Ω–æ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@dp.message(states.NewAdv.photos, F.content_type.in_({"photo"}))
async def get_photo(message: types.Message, state: FSMContext):
    if message.photo is not None:

        current_data = await state.get_data()

        photo = message.photo[-1]
        file_id = photo.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path

        if current_data.get("photos") is None:
            await state.update_data(photos=[])

        photos = await state.get_data()

        photos = photos['photos']

        photos.append({"file_path": file_path, "file_id": file_id})

        await state.update_data(photos=photos)

        await message.answer(
            f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=buttons.Common.complete,
                resize_keyboard=True,
            )
        )


@dp.message(states.NewAdv.photos, F.text.lower() == "–≥–æ—Ç–æ–≤–æ")
async def review_photo(message: types.Message, state: FSMContext):
    current_data = await state.get_data()

    images = []

    if current_data is not None:
        if current_data.get("photos") is not None:
            for i, img in enumerate(current_data.get("photos")):
                images.append(types.input_media_photo.InputMediaPhoto(media=img['file_id']))
        await message.answer_media_group(images)

    await message.answer(f"üí¨ –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç:\n\n{current_data['text']}")

    await message.answer(
        f"ü§î –í—Å–µ –≤–µ—Ä–Ω–æ?",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=buttons.Common.yes_or_not,
            resize_keyboard=True,
        )
    )

    await state.set_state(states.NewAdv.check)


@dp.message(states.NewAdv.check, F.text.lower() == "–¥–∞")
async def download_photos(message: types.Message, state: FSMContext):
    current_data = await state.get_data()

    images_paths = []

    if current_data is not None:
        if current_data.get("photos") is not None:
            await message.answer(
                f"üöÄ –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            for i, img in enumerate(current_data.get("photos")):
                filename = str(uuid.uuid4())
                Path(f"{settings.PHOTOS_PATH}/{current_data['name']}/").mkdir(parents=True, exist_ok=True)
                await bot.download_file(img['file_path'],
                                        f"{settings.PHOTOS_PATH}/{current_data['name']}/{filename}.jpg")

                images_paths.append(f"{settings.PHOTOS_PATH}/{current_data['name']}/{filename}.jpg")

    result = adv_manager.create_advertisement(current_data['name'],
                                              current_data['text'],
                                              images_paths,
                                              current_data['publish_time'])

    if result.status == AdvertisementCreateStatus.ALREADY_EXIST:
        await message.answer(
            f"‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {current_data['name']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ù–∞–∑–æ–≤–∏—Ç–µ –∫–∞–∫-–Ω–∏–±—É–¥—å –ø–æ-–¥—Ä—É–≥–æ–º—É")
    if result.status == AdvertisementCreateStatus.FAILED:
        await message.answer(f"‚ùå –í–æ –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    else:

        await message.answer(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ. –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {result.item.id}")

        await distributor.on_ad_added(result.item)

    return await command_start(message, state)


@dp.message(Command("start"))
async def command_start(message: types.Message, state: FSMContext) -> None:
    if message.from_user.id in settings.ALLOWED_CHATS:
        await state.clear()
        await state.set_state(states.MainMenu.menu)
        await message.answer(
            "üöÄ –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=buttons.Menu.main_menu,
                resize_keyboard=True,
            )
        )
    else:
        await message.answer(f"–û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É")


async def main():

    res = common_tools.get_files_in_dir(f'{settings.ACCOUNTS_PATH}/ready')

    await distributor.store.add_account(res)

    results = adv_manager.get_all_advertisement()

    for res in results:
        await distributor.on_ad_added(res)

    asyncio.create_task(distributor.run())

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
